/**
 *  Project ephemera
 *  Date 2020-09-03 15:49
 *  Author jiangfh
 *  Version 0.0.1
 *  Description 启动开发环境
 */

/**
 * 初始化环境变量为 development
 */
import fs from "fs";
import webpack from "webpack";
import paths from "./lib/paths";
import { loadEnvironment } from "./lib/env";
import WebpackDevServer from "webpack-dev-server";
import chalk from "chalk";
import WebpackConfig from "../config/webpack.dev";

import {
    checkRequiredFiles,
    clearConsole,
    checkBrowsers,
    choosePort,
    prepareUrls,
    prepareProxy,
} from "./utils";

process.env.BABEL_ENV = "development";
process.env.NODE_ENV = "development";

const isInteractive = process.stdout.isTTY;

/**
 * 遇到错误且未捕获时，让系统崩溃
 */
process.on("unhandledRejection", (err) => {
    throw err;
});

/**
 * 加载环境变量
 */
loadEnvironment();

if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
    process.exit(1);
}

const DEFAULT_PORT = parseInt(process.env.PORT || "3000", 10);
const HOST = process.env.HOST || "0.0.0.0";

if (process.env.HOST) {
    console.log(
        chalk.cyan(
            `Attempting to bind to HOST environment variable: ${chalk.yellow.bold(
                process.env.HOST
            )}`
        )
    );
}

checkBrowsers(paths.appPath)
    .then(() => choosePort(HOST, DEFAULT_PORT))
    .then((port) => {
        console.log(chalk.cyan("Port: "), chalk.yellow.bold(port));
        if (!port) {
            console.log(chalk.red.bold("we have not found a port!"));
            return;
        }

        // const config = new WebpackConfig();
        const config = WebpackConfig.createConfig();
        const protocol = process.env.HTTPS === "true" ? "https" : "http";
        const appName = require(paths.appPackageJson).name;
        const useTypeScript = fs.existsSync(paths.appTsConfig);
        const tscCompileOnError = process.env.TSC_COMPILE_ON_ERROR === "true";
        const urls = prepareUrls(protocol, HOST, port, paths.publicUrlOrPath.slice(0, -1));

        // const devSocket = {
        //     warnings: (warnings) => devServer.sockWrite(devServer.sockets, "warnings", warnings),
        //     errors: (errors) => devServer.sockWrite(devServer.sockets, "errors", errors),
        // };
        // const compiler = createCompiler({
        //     appName,
        //     config,
        //     devSocket,
        //     urls,
        //     useYarn,
        //     useTypeScript,
        //     tscCompileOnError,
        //     webpack,
        // });

        // const proxySetting = require(paths.appPackageJson).proxy;
        const proxySetting = "http://192.168.31.123:8380";
        const proxyConfig = prepareProxy(proxySetting, paths.appPublic, paths.publicUrlOrPath);
        // // Serve webpack assets generated by the compiler over a web server.
        // const serverConfig = createDevServerConfig(proxyConfig, urls.lanUrlForConfig);

        // const devServer = new WebpackDevServer(compiler, serverConfig);

        // console.log(paths.appPackageJson, proxySetting);
    });
